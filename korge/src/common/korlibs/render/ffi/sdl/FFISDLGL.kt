package korlibs.render.ffi.sdl

import korlibs.datastructure.*
import korlibs.ffi.*
import korlibs.kgl.*
import korlibs.memory.*

object FFISDLGL : SymbolResolverFFILib({ SDL.SDL_GL_GetProcAddress(it) }) {
    private var context: FFIPointer? = null
    private var window: FFIPointer? = null
    init { initStart() }

    val glActiveTexture: (texture: Int) -> Unit by func()
    val glAttachShader: (program: Int, shader: Int) -> Unit by func()
    val glBindAttribLocation: (program: Int, index: Int, name: String) -> Unit by func()
    val glBindBuffer: (target: Int, buffer: Int) -> Unit by func()
    val glBindBufferRange: (target: Int, index: Int, buffer: Int, offset: Int, size: Int) -> Unit by func()
    val glBindFramebuffer: (target: Int, framebuffer: Int) -> Unit by func()
    val glBindRenderbuffer: (target: Int, renderbuffer: Int) -> Unit by func()
    val glBindTexture: (target: Int, texture: Int) -> Unit by func()
    val glBindVertexArray: (array: Int) -> Unit by func()
    val glBlendColor: (red: Float, green: Float, blue: Float, alpha: Float) -> Unit by func()
    val glBlendEquation: (mode: Int) -> Unit by func()
    val glBlendEquationSeparate: (modeRGB: Int, modeAlpha: Int) -> Unit by func()
    val glBlendFunc: (sfactor: Int, dfactor: Int) -> Unit by func()
    val glBlendFuncSeparate: (sfactorRGB: Int, dfactorRGB: Int, sfactorAlpha: Int, dfactorAlpha: Int) -> Unit by func()
    val glBufferData: (target: Int, size: Int, data: Buffer, usage: Int) -> Unit by func()
    val glBufferSubData: (target: Int, offset: Int, size: Int, data: Buffer) -> Unit by func()
    val glCheckFramebufferStatus: (target: Int) -> Int by func()
    val glClear: (mask: Int) -> Unit by func()
    val glClearColor: (red: Float, green: Float, blue: Float, alpha: Float) -> Unit by func()
    val glClearDepthf: (d: Float) -> Unit by func()
    val glClearStencil: (s: Int) -> Unit by func()
    val glColorMask: (red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean) -> Unit by func()
    val glCompileShader: (shader: Int) -> Unit by func()
    val glCompressedTexImage2D: (target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, imageSize: Int, data: Buffer) -> Unit by func()
    val glCompressedTexSubImage2D: (target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, imageSize: Int, data: Buffer) -> Unit by func()
    val glCopyTexImage2D: (target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int) -> Unit by func()
    val glCopyTexSubImage2D: (target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int) -> Unit by func()
    val glCreateProgram: () -> Int by func()
    val glCreateShader: (type: Int) -> Int by func()
    val glCullFace: (mode: Int) -> Unit by func()
    val glDeleteBuffers: (n: Int, items: Buffer) -> Unit by func()
    val glDeleteFramebuffers: (n: Int, items: Buffer) -> Unit by func()
    val glDeleteProgram: (program: Int) -> Unit by func()
    val glDeleteRenderbuffers: (n: Int, items: Buffer) -> Unit by func()
    val glDeleteShader: (shader: Int) -> Unit by func()
    val glDeleteTextures: (n: Int, items: Buffer) -> Unit by func()
    val glDeleteVertexArrays: (n: Int, arrays: Buffer) -> Unit by func()
    val glDepthFunc: (func: Int) -> Unit by func()
    val glDepthMask: (flag: Boolean) -> Unit by func()
    val glDepthRangef: (n: Float, f: Float) -> Unit by func()
    val glDetachShader: (program: Int, shader: Int) -> Unit by func()
    val glDisable: (cap: Int) -> Unit by func()
    val glDisableVertexAttribArray: (index: Int) -> Unit by func()
    val glDrawArrays: (mode: Int, first: Int, count: Int) -> Unit by func()
    val glDrawArraysInstanced: (mode: Int, first: Int, count: Int, instancecount: Int) -> Unit by func()
    val glDrawElements: (mode: Int, count: Int, type: Int, indices: Int) -> Unit by func()
    val glDrawElementsInstanced: (mode: Int, count: Int, type: Int, indices: Int, instancecount: Int) -> Unit by func()
    val glEnable: (cap: Int) -> Unit by func()
    val glEnableVertexAttribArray: (index: Int) -> Unit by func()
    val glFinish: () -> Unit by func()
    val glFlush: () -> Unit by func()
    val glFramebufferRenderbuffer: (target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: Int) -> Unit by func()
    val glFramebufferTexture2D: (target: Int, attachment: Int, textarget: Int, texture: Int, level: Int) -> Unit by func()
    val glFrontFace: (mode: Int) -> Unit by func()
    val glGenBuffers: (n: Int, buffers: Buffer) -> Unit by func()
    val glGenFramebuffers: (n: Int, framebuffers: Buffer) -> Unit by func()
    val glGenRenderbuffers: (n: Int, renderbuffers: Buffer) -> Unit by func()
    val glGenTextures: (n: Int, textures: Buffer) -> Unit by func()
    val glGenVertexArrays: (n: Int, arrays: Buffer) -> Unit by func()
    val glGenerateMipmap: (target: Int) -> Unit by func()
    val glGetActiveAttrib: (program: Int, index: Int, bufSize: Int, length: Buffer, size: Buffer, type: Buffer, name: Buffer) -> Unit by func()
    val glGetActiveUniform: (program: Int, index: Int, bufSize: Int, length: Buffer, size: Buffer, type: Buffer, name: Buffer) -> Unit by func()
    val glGetAttachedShaders: (program: Int, maxCount: Int, count: Buffer, shaders: Buffer) -> Unit by func()
    val glGetAttribLocation: (program: Int, name: String) -> Int by func()
    val glGetBooleanv: (pname: Int, data: Buffer) -> Unit by func()
    val glGetBufferParameteriv: (target: Int, pname: Int, params: Buffer) -> Unit by func()
    val glGetError: () -> Int by func()
    val glGetFloatv: (pname: Int, data: Buffer) -> Unit by func()
    val glGetFramebufferAttachmentParameteriv: (target: Int, attachment: Int, pname: Int, params: Buffer) -> Unit by func()
    val glGetIntegerv: (pname: Int, data: Buffer) -> Unit by func()
    val glGetProgramInfoLog: (program: Int, bufSize: Int, length: Buffer, infoLog: Buffer) -> Unit by func()
    val glGetProgramiv: (program: Int, pname: Int, params: Buffer) -> Unit by func()
    val glGetRenderbufferParameteriv: (target: Int, pname: Int, params: Buffer) -> Unit by func()
    val glGetShaderInfoLog: (shader: Int, bufSize: Int, length: Buffer, infoLog: Buffer) -> Unit by func()
    val glGetShaderPrecisionFormat: (shadertype: Int, precisiontype: Int, range: Buffer, precision: Buffer) -> Unit by func()
    val glGetShaderSource: (shader: Int, bufSize: Int, length: Buffer, source: Buffer) -> Unit by func()
    val glGetShaderiv: (shader: Int, pname: Int, params: Buffer) -> Unit by func()
    val glGetString: (name: Int) -> String by func()
    val glGetStringi: (name: Int, index: Int) -> String? by func()
    val glGetTexParameterfv: (target: Int, pname: Int, params: Buffer) -> Unit by func()
    val glGetTexParameteriv: (target: Int, pname: Int, params: Buffer) -> Unit by func()
    val glGetUniformBlockIndex: (program: Int, name: String) -> Int by func()
    val glGetUniformLocation: (program: Int, name: String) -> Int by func()
    val glGetUniformfv: (program: Int, location: Int, params: Buffer) -> Unit by func()
    val glGetUniformiv: (program: Int, location: Int, params: Buffer) -> Unit by func()
    val glGetVertexAttribPointerv: (index: Int, pname: Int, pointer: Buffer) -> Unit by func()
    val glGetVertexAttribfv: (index: Int, pname: Int, params: Buffer) -> Unit by func()
    val glGetVertexAttribiv: (index: Int, pname: Int, params: Buffer) -> Unit by func()
    val glHint: (target: Int, mode: Int) -> Unit by func()
    val glIsBuffer: (buffer: Int) -> Boolean by func()
    val glIsEnabled: (cap: Int) -> Boolean by func()
    val glIsFramebuffer: (framebuffer: Int) -> Boolean by func()
    val glIsProgram: (program: Int) -> Boolean by func()
    val glIsRenderbuffer: (renderbuffer: Int) -> Boolean by func()
    val glIsShader: (shader: Int) -> Boolean by func()
    val glIsTexture: (texture: Int) -> Boolean by func()
    val glLineWidth: (width: Float) -> Unit by func()
    val glLinkProgram: (program: Int) -> Unit by func()
    val glPixelStorei: (pname: Int, param: Int) -> Unit by func()
    val glPolygonOffset: (factor: Float, units: Float) -> Unit by func()
    val glReadPixels: (x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: Buffer) -> Unit by func()
    val glReleaseShaderCompiler: () -> Unit by func()
    val glRenderbufferStorage: (target: Int, internalformat: Int, width: Int, height: Int) -> Unit by func()
    val glRenderbufferStorageMultisample: (target: Int, samples: Int, internalformat: Int, width: Int, height: Int) -> Unit by func()
    val glSampleCoverage: (value: Float, invert: Boolean) -> Unit by func()
    val glScissor: (x: Int, y: Int, width: Int, height: Int) -> Unit by func()
    val glShaderBinary: (count: Int, shaders: Buffer, binaryformat: Int, binary: Buffer, length: Int) -> Unit by func()
    val glShaderSource: (shader: Int, count: Int, string: FFIPointerArray, length: IntArray) -> Unit by func()
    val glStencilFunc: (func: Int, ref: Int, mask: Int) -> Unit by func()
    val glStencilFuncSeparate: (face: Int, func: Int, ref: Int, mask: Int) -> Unit by func()
    val glStencilMask: (mask: Int) -> Unit by func()
    val glStencilMaskSeparate: (face: Int, mask: Int) -> Unit by func()
    val glStencilOp: (fail: Int, zfail: Int, zpass: Int) -> Unit by func()
    val glStencilOpSeparate: (face: Int, sfail: Int, dpfail: Int, dppass: Int) -> Unit by func()
    //val glTexImage2D: (target: Int, level: Int, internalformat: Int, format: Int, type: Int, data: NativeImage) -> kotlin.Unit by func()
    val glTexImage2D: (target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: Buffer?) -> Unit by func()
    val glTexImage2DMultisample: (target: Int, samples: Int, internalformat: Int, width: Int, height: Int, fixedsamplelocations: Boolean) -> Unit by func()
    val glTexParameterf: (target: Int, pname: Int, param: Float) -> Unit by func()
    val glTexParameterfv: (target: Int, pname: Int, params: Buffer) -> Unit by func()
    val glTexParameteri: (target: Int, pname: Int, param: Int) -> Unit by func()
    val glTexParameteriv: (target: Int, pname: Int, params: Buffer) -> Unit by func()
    val glTexSubImage2D: (target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: Buffer) -> Unit by func()
    val glUniform1f: (location: Int, v0: Float) -> Unit by func()
    val glUniform1fv: (location: Int, count: Int, value: Buffer) -> Unit by func()
    val glUniform1i: (location: Int, v0: Int) -> Unit by func()
    val glUniform1iv: (location: Int, count: Int, value: Buffer) -> Unit by func()
    val glUniform2f: (location: Int, v0: Float, v1: Float) -> Unit by func()
    val glUniform2fv: (location: Int, count: Int, value: Buffer) -> Unit by func()
    val glUniform2i: (location: Int, v0: Int, v1: Int) -> Unit by func()
    val glUniform2iv: (location: Int, count: Int, value: Buffer) -> Unit by func()
    val glUniform3f: (location: Int, v0: Float, v1: Float, v2: Float) -> Unit by func()
    val glUniform3fv: (location: Int, count: Int, value: Buffer) -> Unit by func()
    val glUniform3i: (location: Int, v0: Int, v1: Int, v2: Int) -> Unit by func()
    val glUniform3iv: (location: Int, count: Int, value: Buffer) -> Unit by func()
    val glUniform4f: (location: Int, v0: Float, v1: Float, v2: Float, v3: Float) -> Unit by func()
    val glUniform4fv: (location: Int, count: Int, value: Buffer) -> Unit by func()
    val glUniform4i: (location: Int, v0: Int, v1: Int, v2: Int, v3: Int) -> Unit by func()
    val glUniform4iv: (location: Int, count: Int, value: Buffer) -> Unit by func()
    val glUniformBlockBinding: (program: Int, uniformBlockIndex: Int, uniformBlockBinding: Int) -> Unit by func()
    val glUniformMatrix2fv: (location: Int, count: Int, transpose: Boolean, value: Buffer) -> Unit by func()
    val glUniformMatrix3fv: (location: Int, count: Int, transpose: Boolean, value: Buffer) -> Unit by func()
    val glUniformMatrix4fv: (location: Int, count: Int, transpose: Boolean, value: Buffer) -> Unit by func()
    val glUseProgram: (program: Int) -> Unit by func()
    val glValidateProgram: (program: Int) -> Unit by func()
    val glVertexAttrib1f: (index: Int, x: Float) -> Unit by func()
    val glVertexAttrib1fv: (index: Int, v: Buffer) -> Unit by func()
    val glVertexAttrib2f: (index: Int, x: Float, y: Float) -> Unit by func()
    val glVertexAttrib2fv: (index: Int, v: Buffer) -> Unit by func()
    val glVertexAttrib3f: (index: Int, x: Float, y: Float, z: Float) -> Unit by func()
    val glVertexAttrib3fv: (index: Int, v: Buffer) -> Unit by func()
    val glVertexAttrib4f: (index: Int, x: Float, y: Float, z: Float, w: Float) -> Unit by func()
    val glVertexAttrib4fv: (index: Int, v: Buffer) -> Unit by func()
    val glVertexAttribDivisor: (index: Int, divisor: Int) -> Unit by func()
    val glVertexAttribPointer: (index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, pointer: Long) -> Unit by func()
    val glViewport: (x: Int, y: Int, width: Int, height: Int) -> Unit by func()

    init { initEnd() }

    private fun initStart() {
        SDL.SDL_InitSubSystem(0x00000020)
        window = SDL.SDL_CreateOpenGLWindow(1, 1, shown = false)
        context = SDL.SDL_GL_CreateContext(window)
        SDL.SDL_GL_SetSwapInterval(0)
        SDL.SDL_GL_LoadLibrary(null)
    }

    private fun initEnd() {
        //SDL.SDL_GL_UnloadLibrary()
        SDL.SDL_GL_DeleteContext(context)
        SDL.SDL_DestroyWindow(window)
    }
}

class FFIKmlGl : KmlGl() {
    fun String.strBA(): ByteArray = "$this\u0000".encodeToByteArray()
    fun FFIPointer?.ptrToStr(): String? = this?.getStringz()
    fun Boolean.toInt(): Int = if (this) 1 else 0
    override fun activeTexture(texture: Int): Unit = FFISDLGL.glActiveTexture(texture)
    override fun attachShader(program: Int, shader: Int): Unit = FFISDLGL.glAttachShader(program, shader)
    override fun bindAttribLocation(program: Int, index: Int, name: String): Unit = FFISDLGL.glBindAttribLocation(program, index, name)
    override fun bindBuffer(target: Int, buffer: Int): Unit = FFISDLGL.glBindBuffer(target, buffer)
    override fun bindBufferRange(target: Int, index: Int, buffer: Int, offset: Int, size: Int): Unit = FFISDLGL.glBindBufferRange(target, index, buffer, offset, size)
    override fun bindFramebuffer(target: Int, framebuffer: Int): Unit = FFISDLGL.glBindFramebuffer(target, framebuffer)
    override fun bindRenderbuffer(target: Int, renderbuffer: Int): Unit = FFISDLGL.glBindRenderbuffer(target, renderbuffer)
    override fun bindTexture(target: Int, texture: Int): Unit = FFISDLGL.glBindTexture(target, texture)
    override fun bindVertexArray(array: Int): Unit = FFISDLGL.glBindVertexArray(array)
    override fun blendColor(red: Float, green: Float, blue: Float, alpha: Float): Unit = FFISDLGL.glBlendColor(red, green, blue, alpha)
    override fun blendEquation(mode: Int): Unit = FFISDLGL.glBlendEquation(mode)
    override fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int): Unit = FFISDLGL.glBlendEquationSeparate(modeRGB, modeAlpha)
    override fun blendFunc(sfactor: Int, dfactor: Int): Unit = FFISDLGL.glBlendFunc(sfactor, dfactor)
    override fun blendFuncSeparate(sfactorRGB: Int, dfactorRGB: Int, sfactorAlpha: Int, dfactorAlpha: Int): Unit = FFISDLGL.glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
    override fun bufferData(target: Int, size: Int, data: Buffer, usage: Int): Unit = FFISDLGL.glBufferData(target, size, data, usage)
    override fun bufferSubData(target: Int, offset: Int, size: Int, data: Buffer): Unit = FFISDLGL.glBufferSubData(target, offset, size, data)
    override fun checkFramebufferStatus(target: Int): kotlin.Int = FFISDLGL.glCheckFramebufferStatus(target)
    override fun clear(mask: Int): Unit = FFISDLGL.glClear(mask)
    override fun clearColor(red: Float, green: Float, blue: Float, alpha: Float): Unit = FFISDLGL.glClearColor(red, green, blue, alpha)
    override fun clearDepthf(d: Float): Unit = FFISDLGL.glClearDepthf(d)
    override fun clearStencil(s: Int): Unit = FFISDLGL.glClearStencil(s)
    override fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean): Unit = FFISDLGL.glColorMask(red, green, blue, alpha)
    override fun compileShader(shader: Int): Unit = FFISDLGL.glCompileShader(shader)
    override fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, imageSize: Int, data: Buffer): Unit = FFISDLGL.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data)
    override fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, imageSize: Int, data: Buffer): Unit = FFISDLGL.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data)
    override fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int): Unit = FFISDLGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border)
    override fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit = FFISDLGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height)
    override fun createProgram(): kotlin.Int = FFISDLGL.glCreateProgram()
    override fun createShader(type: Int): kotlin.Int = FFISDLGL.glCreateShader(type)
    override fun cullFace(mode: Int): Unit = FFISDLGL.glCullFace(mode)
    override fun deleteBuffers(n: Int, items: Buffer): Unit = FFISDLGL.glDeleteBuffers(n, items)
    override fun deleteFramebuffers(n: Int, items: Buffer): Unit = FFISDLGL.glDeleteFramebuffers(n, items)
    override fun deleteProgram(program: Int): Unit = FFISDLGL.glDeleteProgram(program)
    override fun deleteRenderbuffers(n: Int, items: Buffer): Unit = FFISDLGL.glDeleteRenderbuffers(n, items)
    override fun deleteShader(shader: Int): Unit = FFISDLGL.glDeleteShader(shader)
    override fun deleteTextures(n: Int, items: Buffer): Unit = FFISDLGL.glDeleteTextures(n, items)
    override fun deleteVertexArrays(n: Int, arrays: Buffer): Unit = FFISDLGL.glDeleteVertexArrays(n, arrays)
    override fun depthFunc(func: Int): Unit = FFISDLGL.glDepthFunc(func)
    override fun depthMask(flag: Boolean): Unit = FFISDLGL.glDepthMask(flag)
    override fun depthRangef(n: Float, f: Float): Unit = FFISDLGL.glDepthRangef(n, f)
    override fun detachShader(program: Int, shader: Int): Unit = FFISDLGL.glDetachShader(program, shader)
    override fun disable(cap: Int): Unit = FFISDLGL.glDisable(cap)
    override fun disableVertexAttribArray(index: Int): Unit = FFISDLGL.glDisableVertexAttribArray(index)
    override fun drawArrays(mode: Int, first: Int, count: Int): Unit = FFISDLGL.glDrawArrays(mode, first, count)
    override fun drawArraysInstanced(mode: Int, first: Int, count: Int, instancecount: Int): Unit = FFISDLGL.glDrawArraysInstanced(mode, first, count, instancecount)
    override fun drawElements(mode: Int, count: Int, type: Int, indices: Int): Unit = FFISDLGL.glDrawElements(mode, count, type, indices)
    override fun drawElementsInstanced(mode: Int, count: Int, type: Int, indices: Int, instancecount: Int): Unit = FFISDLGL.glDrawElementsInstanced(mode, count, type, indices, instancecount)
    override fun enable(cap: Int): Unit = FFISDLGL.glEnable(cap)
    override fun enableVertexAttribArray(index: Int): Unit = FFISDLGL.glEnableVertexAttribArray(index)
    override fun finish(): Unit = FFISDLGL.glFinish()
    override fun flush(): Unit = FFISDLGL.glFlush()
    override fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: Int): Unit = FFISDLGL.glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer)
    override fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: Int, level: Int): Unit = FFISDLGL.glFramebufferTexture2D(target, attachment, textarget, texture, level)
    override fun frontFace(mode: Int): Unit = FFISDLGL.glFrontFace(mode)
    override fun genBuffers(n: Int, buffers: Buffer): Unit = FFISDLGL.glGenBuffers(n, buffers)
    override fun genFramebuffers(n: Int, framebuffers: Buffer): Unit = FFISDLGL.glGenFramebuffers(n, framebuffers)
    override fun genRenderbuffers(n: Int, renderbuffers: Buffer): Unit = FFISDLGL.glGenRenderbuffers(n, renderbuffers)
    override fun genTextures(n: Int, textures: Buffer): Unit = FFISDLGL.glGenTextures(n, textures)
    override fun genVertexArrays(n: Int, arrays: Buffer): Unit = FFISDLGL.glGenVertexArrays(n, arrays)
    override fun generateMipmap(target: Int): Unit = FFISDLGL.glGenerateMipmap(target)
    override fun getActiveAttrib(program: Int, index: Int, bufSize: Int, length: Buffer, size: Buffer, type: Buffer, name: Buffer): Unit = FFISDLGL.glGetActiveAttrib(program, index, bufSize, length, size, type, name)
    override fun getActiveUniform(program: Int, index: Int, bufSize: Int, length: Buffer, size: Buffer, type: Buffer, name: Buffer): Unit = FFISDLGL.glGetActiveUniform(program, index, bufSize, length, size, type, name)
    override fun getAttachedShaders(program: Int, maxCount: Int, count: Buffer, shaders: Buffer): Unit = FFISDLGL.glGetAttachedShaders(program, maxCount, count, shaders)
    override fun getAttribLocation(program: Int, name: String): kotlin.Int = FFISDLGL.glGetAttribLocation(program, name)
    override fun getBooleanv(pname: Int, data: Buffer): Unit = FFISDLGL.glGetBooleanv(pname, data)
    override fun getBufferParameteriv(target: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glGetBufferParameteriv(target, pname, params)
    override fun getError(): kotlin.Int = FFISDLGL.glGetError()
    override fun getFloatv(pname: Int, data: Buffer): Unit = FFISDLGL.glGetFloatv(pname, data)
    override fun getFramebufferAttachmentParameteriv(target: Int, attachment: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glGetFramebufferAttachmentParameteriv(target, attachment, pname, params)
    override fun getIntegerv(pname: Int, data: Buffer): Unit = FFISDLGL.glGetIntegerv(pname, data)
    override fun getProgramInfoLog(program: Int, bufSize: Int, length: Buffer, infoLog: Buffer): Unit = FFISDLGL.glGetProgramInfoLog(program, bufSize, length, infoLog)
    override fun getProgramiv(program: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glGetProgramiv(program, pname, params)
    override fun getRenderbufferParameteriv(target: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glGetRenderbufferParameteriv(target, pname, params)
    override fun getShaderInfoLog(shader: Int, bufSize: Int, length: Buffer, infoLog: Buffer): Unit = FFISDLGL.glGetShaderInfoLog(shader, bufSize, length, infoLog)
    override fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int, range: Buffer, precision: Buffer): Unit = FFISDLGL.glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision)
    override fun getShaderSource(shader: Int, bufSize: Int, length: Buffer, source: Buffer): Unit = FFISDLGL.glGetShaderSource(shader, bufSize, length, source)
    override fun getShaderiv(shader: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glGetShaderiv(shader, pname, params)
    override fun getString(name: Int): kotlin.String = FFISDLGL.glGetString(name)
    override fun getStringi(name: Int, index: Int): kotlin.String? = FFISDLGL.glGetStringi(name, index)
    override fun getTexParameterfv(target: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glGetTexParameterfv(target, pname, params)
    override fun getTexParameteriv(target: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glGetTexParameteriv(target, pname, params)
    override fun getUniformBlockIndex(program: Int, name: String): kotlin.Int = FFISDLGL.glGetUniformBlockIndex(program, name)
    override fun getUniformLocation(program: Int, name: String): kotlin.Int = FFISDLGL.glGetUniformLocation(program, name)
    override fun getUniformfv(program: Int, location: Int, params: Buffer): Unit = FFISDLGL.glGetUniformfv(program, location, params)
    override fun getUniformiv(program: Int, location: Int, params: Buffer): Unit = FFISDLGL.glGetUniformiv(program, location, params)
    override fun getVertexAttribPointerv(index: Int, pname: Int, pointer: Buffer): Unit = FFISDLGL.glGetVertexAttribPointerv(index, pname, pointer)
    override fun getVertexAttribfv(index: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glGetVertexAttribfv(index, pname, params)
    override fun getVertexAttribiv(index: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glGetVertexAttribiv(index, pname, params)
    override fun handleContextLost(): Unit = Unit
    override fun hint(target: Int, mode: Int): Unit = FFISDLGL.glHint(target, mode)
    override fun isBuffer(buffer: Int): kotlin.Boolean = FFISDLGL.glIsBuffer(buffer)
    override fun isEnabled(cap: Int): kotlin.Boolean = FFISDLGL.glIsEnabled(cap)
    override fun isFramebuffer(framebuffer: Int): kotlin.Boolean = FFISDLGL.glIsFramebuffer(framebuffer)
    override fun isProgram(program: Int): kotlin.Boolean = FFISDLGL.glIsProgram(program)
    override fun isRenderbuffer(renderbuffer: Int): kotlin.Boolean = FFISDLGL.glIsRenderbuffer(renderbuffer)
    override fun isShader(shader: Int): kotlin.Boolean = FFISDLGL.glIsShader(shader)
    override fun isTexture(texture: Int): kotlin.Boolean = FFISDLGL.glIsTexture(texture)
    override fun lineWidth(width: Float): Unit = FFISDLGL.glLineWidth(width)
    override fun linkProgram(program: Int): Unit = FFISDLGL.glLinkProgram(program)
    override fun pixelStorei(pname: Int, param: Int): Unit = FFISDLGL.glPixelStorei(pname, param)
    override fun polygonOffset(factor: Float, units: Float): Unit = FFISDLGL.glPolygonOffset(factor, units)
    override fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: Buffer): Unit = FFISDLGL.glReadPixels(x, y, width, height, format, type, pixels)
    override fun releaseShaderCompiler(): Unit = FFISDLGL.glReleaseShaderCompiler()
    override fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int): Unit = FFISDLGL.glRenderbufferStorage(target, internalformat, width, height)
    override fun renderbufferStorageMultisample(target: Int, samples: Int, internalformat: Int, width: Int, height: Int): Unit = FFISDLGL.glRenderbufferStorageMultisample(target, samples, internalformat, width, height)
    override fun sampleCoverage(value: Float, invert: Boolean): Unit = FFISDLGL.glSampleCoverage(value, invert)
    override fun scissor(x: Int, y: Int, width: Int, height: Int): Unit = FFISDLGL.glScissor(x, y, width, height)
    override fun shaderBinary(count: Int, shaders: Buffer, binaryformat: Int, binary: Buffer, length: Int): Unit = FFISDLGL.glShaderBinary(count, shaders, binaryformat, binary, length)
    override fun shaderSource(shader: Int, string: String): Unit {
        val stringBytes = string.strBA()
        FFISDLGL.glShaderSource(shader, 1, ffiPointerArrayOf(CreateFFIMemory(stringBytes).pointer), intArrayOf(stringBytes.size))
    }
    override fun stencilFunc(func: Int, ref: Int, mask: Int): Unit = FFISDLGL.glStencilFunc(func, ref, mask)
    override fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int): Unit = FFISDLGL.glStencilFuncSeparate(face, func, ref, mask)
    override fun stencilMask(mask: Int): Unit = FFISDLGL.glStencilMask(mask)
    override fun stencilMaskSeparate(face: Int, mask: Int): Unit = FFISDLGL.glStencilMaskSeparate(face, mask)
    override fun stencilOp(fail: Int, zfail: Int, zpass: Int): Unit = FFISDLGL.glStencilOp(fail, zfail, zpass)
    override fun stencilOpSeparate(face: Int, sfail: Int, dpfail: Int, dppass: Int): Unit = FFISDLGL.glStencilOpSeparate(face, sfail, dpfail, dppass)
    override fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: Buffer?): Unit {
        FFISDLGL.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels)
        //Deno.exit(0)
    }
    override fun texImage2DMultisample(target: Int, samples: Int, internalformat: Int, width: Int, height: Int, fixedsamplelocations: Boolean): Unit = FFISDLGL.glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations)
    override fun texParameterf(target: Int, pname: Int, param: Float): Unit = FFISDLGL.glTexParameterf(target, pname, param)
    override fun texParameterfv(target: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glTexParameterfv(target, pname, params)
    override fun texParameteri(target: Int, pname: Int, param: Int): Unit = FFISDLGL.glTexParameteri(target, pname, param)
    override fun texParameteriv(target: Int, pname: Int, params: Buffer): Unit = FFISDLGL.glTexParameteriv(target, pname, params)
    override fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: Buffer): Unit = FFISDLGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels)
    override fun uniform1f(location: Int, v0: Float): Unit = FFISDLGL.glUniform1f(location, v0)
    override fun uniform1fv(location: Int, count: Int, value: Buffer): Unit = FFISDLGL.glUniform1fv(location, count, value)
    override fun uniform1i(location: Int, v0: Int): Unit = FFISDLGL.glUniform1i(location, v0)
    override fun uniform1iv(location: Int, count: Int, value: Buffer): Unit = FFISDLGL.glUniform1iv(location, count, value)
    override fun uniform2f(location: Int, v0: Float, v1: Float): Unit = FFISDLGL.glUniform2f(location, v0, v1)
    override fun uniform2fv(location: Int, count: Int, value: Buffer): Unit = FFISDLGL.glUniform2fv(location, count, value)
    override fun uniform2i(location: Int, v0: Int, v1: Int): Unit = FFISDLGL.glUniform2i(location, v0, v1)
    override fun uniform2iv(location: Int, count: Int, value: Buffer): Unit = FFISDLGL.glUniform2iv(location, count, value)
    override fun uniform3f(location: Int, v0: Float, v1: Float, v2: Float): Unit = FFISDLGL.glUniform3f(location, v0, v1, v2)
    override fun uniform3fv(location: Int, count: Int, value: Buffer): Unit = FFISDLGL.glUniform3fv(location, count, value)
    override fun uniform3i(location: Int, v0: Int, v1: Int, v2: Int): Unit = FFISDLGL.glUniform3i(location, v0, v1, v2)
    override fun uniform3iv(location: Int, count: Int, value: Buffer): Unit = FFISDLGL.glUniform3iv(location, count, value)
    override fun uniform4f(location: Int, v0: Float, v1: Float, v2: Float, v3: Float): Unit = FFISDLGL.glUniform4f(location, v0, v1, v2, v3)
    override fun uniform4fv(location: Int, count: Int, value: Buffer): Unit = FFISDLGL.glUniform4fv(location, count, value)
    override fun uniform4i(location: Int, v0: Int, v1: Int, v2: Int, v3: Int): Unit = FFISDLGL.glUniform4i(location, v0, v1, v2, v3)
    override fun uniform4iv(location: Int, count: Int, value: Buffer): Unit = FFISDLGL.glUniform4iv(location, count, value)
    override fun uniformBlockBinding(program: Int, uniformBlockIndex: Int, uniformBlockBinding: Int): Unit = FFISDLGL.glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding)
    override fun uniformMatrix2fv(location: Int, count: Int, transpose: Boolean, value: Buffer): Unit = FFISDLGL.glUniformMatrix2fv(location, count, transpose, value)
    override fun uniformMatrix3fv(location: Int, count: Int, transpose: Boolean, value: Buffer): Unit = FFISDLGL.glUniformMatrix3fv(location, count, transpose, value)
    override fun uniformMatrix4fv(location: Int, count: Int, transpose: Boolean, value: Buffer): Unit = FFISDLGL.glUniformMatrix4fv(location, count, transpose, value)
    override fun useProgram(program: Int): Unit = FFISDLGL.glUseProgram(program)
    override fun validateProgram(program: Int): Unit = FFISDLGL.glValidateProgram(program)
    override fun vertexAttrib1f(index: Int, x: Float): Unit = FFISDLGL.glVertexAttrib1f(index, x)
    override fun vertexAttrib1fv(index: Int, v: Buffer): Unit = FFISDLGL.glVertexAttrib1fv(index, v)
    override fun vertexAttrib2f(index: Int, x: Float, y: Float): Unit = FFISDLGL.glVertexAttrib2f(index, x, y)
    override fun vertexAttrib2fv(index: Int, v: Buffer): Unit = FFISDLGL.glVertexAttrib2fv(index, v)
    override fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float): Unit = FFISDLGL.glVertexAttrib3f(index, x, y, z)
    override fun vertexAttrib3fv(index: Int, v: Buffer): Unit = FFISDLGL.glVertexAttrib3fv(index, v)
    override fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float): Unit = FFISDLGL.glVertexAttrib4f(index, x, y, z, w)
    override fun vertexAttrib4fv(index: Int, v: Buffer): Unit = FFISDLGL.glVertexAttrib4fv(index, v)
    override fun vertexAttribDivisor(index: Int, divisor: Int): Unit = FFISDLGL.glVertexAttribDivisor(index, divisor)
    override fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, pointer: Long): Unit = FFISDLGL.glVertexAttribPointer(index, size, type, normalized, stride, pointer)
    override fun viewport(x: Int, y: Int, width: Int, height: Int): Unit = FFISDLGL.glViewport(x, y, width, height)
}

